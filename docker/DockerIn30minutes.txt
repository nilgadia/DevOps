https://www.alt-codes.net/

☼ The Docker platform

  ♣ Docker provides the ability to package and run an application in a loosely 
    isolated environment called a container. 
  ♣ The isolation and security allow you to run many containers simultaneously 
    on a given host.

♦ Docker Objects
  ○ images
  ○ containers
  ○ networks
  ○ volumes
  ○ plugins
  
♔ Images
  → An image is a read-only template with instructions for 
    creating a Docker container. 
  → Dependent library
  → Often, an image is based on another image.
  → To build your own image, you create a Dockerfile with a 
    simple syntax
♔ Container 
  → Runtime instance of image. 
  → Isloated environment where you can deploye and run application
  → It's having it's own processor, network 
  → it's interacting with kernal
♔ Volumes
♔ Networks
♔ Plugins
♔ Docker commands
  ♕ Container Lifecycle
    ♘ docker create [IMAGE]     –  Create a container (without starting it).
	♘ docker rename [CONTAINER_NAME] [NEW_CONTAINER_NAME] - Rename an existing container.
    ♘ docker run [IMAGE]        – Create & start a new container.
	♘ docker run --rm [IMAGE]   – Removes a container after it stops.
	♘ docker run -td [IMAGE]    – Starts a container and keeps it running.
    ♘ docker run -it [IMAGE]    – Create, start the container, and run a command in it.
	♘ docker rm [CONTAINER]     – Delete a container (if it is not running).
	♘ docker update [CONTAINER] – Update the configuration of one or more containers.
	♘ docker export             – Exports a container’s filesystem as a tar archive
    ♘ docker exec               – Runs a command in a run-time container
	♘ docker run -p {HostPort}:{ContainerPort}     – port binding
	♘ docker run -m 512 --cpu-quota 50000
  ♕ Image Lifecycle
    ♘ docker build    [URL]     – Builds an image form a Docker file.
	♘ docker build -t [URL]     – Builds an image form a Docker file and tag it.
	♘ docker pull [IMAGE]       – Pulls an image or a repository from a registry.
    ♘ docker push [IMAGE]       – Pushes an image or a repository to a registry.
	♘ docker import [URL/FILE]  – Create an image from a tarball.
    ♘ docker commit [CONTAINER] [NEW_IMAGE_NAME] – Create an image from a container.
    ♘ docker rmi [IMAGE]        – Remove an image.
    ♘ docker load [TAR_FILE/STDIN_FILE] – Load an image from a tar archive or stdin.
    ♘ docker save [IMAGE] > [TAR_FILE]  – Save an image to a tar archive, streamed to 
	                                      STDOUT with all parent layers, tags, and versions.
  ♕ Start & Stop
    ♘ docker start [CONTAINER]  – Starts one or more stopped containers.
    ♘ docker stop  [CONTAINER]  – Stops one or more running containers.
	♘ docker restart [CONTAINER]– Stop a running container and start it up again.
	♘ docker pause [CONTAINER]  – Pause processes in a running container.
	♘ docker unpause [CONTAINER]– Unpause processes in a running container.
	♘ docker wait [CONTAINER]   – Block a container until others stop (after which it prints their exit codes).
	♘ docker kill [CONTAINER]   – Kill a container by sending a SIGKILL to a running container.
	♘ docker attach [CONTAINER] – Attach local standard input, output, and error streams to a running container.
  ♕ Information
	♘ docker ps                 – List running containers.
	♘ docker ps -a              – List running stopped containers.
	♘ docker logs [CONTAINER]   – List the logs from a running container.
	♘ docker inspect [OBJECT_NAME/ID] – List low-level information on Docker objects.
	♘ docker events [CONTAINER] – List real-time events from a container.
	♘ docker port [CONTAINER]   – Show port (or specific) mapping for a container.
	♘ docker top [CONTAINER]    – Show running processes in a container.
	♘ docker stats [CONTAINER]  – Show live resource usage statistics of containers.
	♘ docker diff [CONTAINER]   – Show changes to files (or directories) on a filesystem.
	♘ docker image ls           – List all images that are locally stored with the docker engine.
	♘ docker history [IMAGE]    – Show the history of an image.
	♘ docker search – Searches the Docker Hub for images
	♘ docker system df          – Information related to docker system.
  ♕ Networking
	♘ docker network ls         – List networks.
	♘ docker network rm [NETWORK] – Remove one or more networks.
	♘ docker network inspect [NETWORK] – Show information on one or more networks.
	♘ docker network connect [NETWORK] [CONTAINER] – Connects a container to a network.
	♘ docker network disconnect [NETWORK] [CONTAINER] – Disconnect a container from a network.

ENV Variables in Docker
docker run -e APP_COLOR=green simple-webapp-color

🐯 Dockerfile

Instruction   Argument

FROM         Ubuntu                                           1. OS ubuntu
RUN          apt-get update                                   2. Update app repo
RUN          apt-get install python                           3. Install dependencies using apt
RUN          pip install flask                                4. Install python dependencies using pip
RUN          pip install flask-mysql                            
COPY         . /opt/source-code                               5. Copy source code to /opt folder  
ENTRYPOINT   FLASK_APP=/opt/source-code/app.py flask run      6. Run the web server using flask command

 → Layered architecture

   docker build Dockerfile -t sshahid/my-custom-app           Create image
 → failuare it start from next step

CMD Vs ENTRYPOINT

In short, CMD defines default commands and/or parameters for a container. 
CMD is an instruction that is best to use if you need a default command 
which users can easily override. If a Dockerfile has multiple CMDs, 
it only applies the instructions from the last one.

On the other hand, ENTRYPOINT is preferred when you want to define a container 
with a specific executable. You cannot override an ENTRYPOINT when starting a 
container unless you add the --entrypoint flag.

Docker compose

Registry
  → Default Registry (hub.docker.com) > Repository (shahid/rest-h2) > Tag   
    
image:  docker.io/nginx/nginx

Private Registry

docker image tag my-image localhost:5000/my-image

Docker Engine

Docker Cli --> Rest Api --> Docker Deamon

Network

Bridge (Internal ip) - Host(attach to host ip) - None
Docker Engine
Docker Clinet
Docker Deamon
 → Containers
 → Local Images
 → Image Registry

Interview Question
https://www.edureka.co/blog/interview-questions/docker-interview-questions/

What is container 
What is image